// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // set 0/1 constants
    Not(in=reset, out=notReset);
    Or(a=reset, b=notReset, out=one);
    Not(in=true, out=zero);


    // decide whether this is aInst or cInst
    And(a=one, b=instruction[15], out=cInst);
    Not(in=cInst, out=aInst);

    // all3 = every jump bit is 1
    And(a=instruction[0], b=instruction[1], out=out01jump);
    And(a=out01jump, b=instruction[2], out=all3);


    // begin witht the real cpu
    Mux16(a=loop, b=instruction, sel=aInst, out=aRegIn);

    
    Or(a=aInst, b=instruction[5], out=loadAReg);
    Register(in=aRegIn, load=loadAReg, out=aRegOut, out[0..14]=addressM);


    And(a=instruction[12], b=cInst, out=aBit);
    Mux16(a=aRegOut, b=inM, sel=aBit, out=aOrM);

    And(a=cInst, b=instruction[4], out=writeToD);
    Register(in=loop, load=writeToD, out=dRegOut);


    
    ALU(x=dRegOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=loop, zr=zr, ng=ng);


    // check to see if we should jump
    // first check that one of the specific jumps applies
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notng, b=notzr, out=ps);
    
    And(a=ng, b=instruction[2], out=loadNg);
    And(a=zr, b=instruction[1], out=loadZr);
    And(a=ps, b=instruction[0], out=loadPs);
    Or(a=loadNg, b=loadZr, out=z1);
    Or(a=z1, b=loadPs, out=z2);

    // now check if possibly all three are checked. 
    Or(a=z2, b=all3, out=loadPcPre);
    //make sure we are in cInst mode
    And(a=cInst, b=loadPcPre, out=loadPC);

    //if we don't jump, we increment
    Not(in=loadPC, out=incPC);

    PC(in=aRegOut, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

    And(a=cInst, b=instruction[3], out=writeM);
}